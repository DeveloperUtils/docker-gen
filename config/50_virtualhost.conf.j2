{% for container in containers -%}
{%+ if container.ssl.enabled %}
server {
    listen 80;
    listen [::]:80;

    server_name {{ container.url.domain }};

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    server_name {{ container.url.domain }};

    {% if container.ssl.cert_path.crt.startswith('/') -%}
    ssl_certificate "{{ container.ssl.cert_path.crt }}";
    {%- else -%}
    ssl_certificate "/etc/nginx/certs/{{ container.ssl.cert_path.crt }}";
    {%- endif %}
    {% if container.ssl.cert_path.key.startswith('/') -%}
    ssl_certificate_key "{{ container.ssl.cert_path.key }}";
    {%- else -%}
    ssl_certificate_key "/etc/nginx/certs/{{ container.ssl.cert_path.key }}";
    {%- endif %}

{%- else -%}
server {
    listen 80;
    listen [::]:80;

    server_name {{ container.url.domain }};
{%- endif %}

    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # container id: {{ container.name }}({{ container.id }})
    server_name {{ container.url.domain }};
    proxy_buffering off;
    error_log /proc/self/fd/2;
    access_log /proc/self/fd/1;

    location {{ container.url.path }} {
        proxy_pass http://{{ container.name }};
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # HTTP 1.1 support
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
}
{% endfor %}
